
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "startANNOTATION BOOLEAN CHAR CHAR_STAR EE ELSE GE ID IF INT INT_STAR LE NE NUM RETURN STRING VOID WHILEstart : declaration_listdeclaration_list : declaration_list declarationdeclaration_list : declarationdeclaration : var_declarationdeclaration : fun_declarationvar_declaration : type_specifier ID ';' var_declaration : type_specifier ID '[' NUM ']' '=' '{' numlist '}' ';' var_declaration : type_specifier ID '[' NUM ']' '=' STRING ';' type_specifier : INTtype_specifier : VOIDtype_specifier : CHARtype_specifier : CHAR_STARtype_specifier : INT_STARfun_declaration : type_specifier ID '(' params ')' statement_blockfun_declaration : statement_blockparams : param_listparams : VOIDparams : param_list : param_list ',' paramparam_list : paramparam : type_specifier IDparam : type_specifier ID '[' ']' statement_block : '{' statement_list '}' statement_list : statement_list statementstatement_list : statement : expression_statementstatement : statement_blockstatement : if_else_statementsstatement : while_statmentsstatement : return_statementsstatement : var_declarationexpression_statement : expression ';' expression_statement : ';' if_else_statements : IF '(' expression ')' statementif_else_statements : IF '(' expression ')' statement ELSE statementwhile_statments : WHILE '(' expression ')' statementreturn_statements : RETURN ';' return_statements : RETURN expression ';' expression : var '=' expressionexpression : simple_expressionexpression : type_specifier var '=' expressionexpression : STRING numlist : numlist ',' NUM numlist : NUM   var : ID var : ID '[' expression ']' simple_expression : addsub_object relational_operator addsub_objectsimple_expression : addsub_objectrelational_operator : LErelational_operator : '<' relational_operator : '>' relational_operator : GErelational_operator : EErelational_operator : NEaddsub_object : addsub_object add_sub muldiv_objectaddsub_object : muldiv_objectmuldiv_object : muldiv_object mul_div objectmuldiv_object : objectadd_sub : '+' add_sub : '-'  mul_div : '*'  mul_div : '/' object : '(' expression ')' object : varobject : fun_valueobject : NUMobject : BOOLEAN fun_value : ID '(' args ')' args : arg_listargs :  arg_list : arg_list ',' expression arg_list : expression"
    
_lr_action_items = {'INT':([0,2,3,4,5,7,8,14,16,17,19,20,21,22,23,24,25,26,27,29,31,33,51,52,55,56,60,61,62,79,84,85,86,98,100,101,106,110,111,115,116,119,120,],[9,9,-3,-4,-5,-25,-15,-2,9,-6,9,-23,-24,-26,-27,-28,-29,-30,-31,-33,9,9,-32,9,9,-37,9,9,9,9,-38,9,9,-14,9,9,9,-34,-36,-8,9,-35,-7,]),'VOID':([0,2,3,4,5,7,8,14,16,17,19,20,21,22,23,24,25,26,27,29,31,33,51,52,55,56,60,61,62,79,84,85,86,98,100,101,106,110,111,115,116,119,120,],[10,10,-3,-4,-5,-25,-15,-2,10,-6,49,-23,-24,-26,-27,-28,-29,-30,-31,-33,10,10,-32,10,10,-37,10,10,10,10,-38,10,10,-14,10,10,10,-34,-36,-8,10,-35,-7,]),'CHAR':([0,2,3,4,5,7,8,14,16,17,19,20,21,22,23,24,25,26,27,29,31,33,51,52,55,56,60,61,62,79,84,85,86,98,100,101,106,110,111,115,116,119,120,],[11,11,-3,-4,-5,-25,-15,-2,11,-6,11,-23,-24,-26,-27,-28,-29,-30,-31,-33,11,11,-32,11,11,-37,11,11,11,11,-38,11,11,-14,11,11,11,-34,-36,-8,11,-35,-7,]),'CHAR_STAR':([0,2,3,4,5,7,8,14,16,17,19,20,21,22,23,24,25,26,27,29,31,33,51,52,55,56,60,61,62,79,84,85,86,98,100,101,106,110,111,115,116,119,120,],[12,12,-3,-4,-5,-25,-15,-2,12,-6,12,-23,-24,-26,-27,-28,-29,-30,-31,-33,12,12,-32,12,12,-37,12,12,12,12,-38,12,12,-14,12,12,12,-34,-36,-8,12,-35,-7,]),'INT_STAR':([0,2,3,4,5,7,8,14,16,17,19,20,21,22,23,24,25,26,27,29,31,33,51,52,55,56,60,61,62,79,84,85,86,98,100,101,106,110,111,115,116,119,120,],[13,13,-3,-4,-5,-25,-15,-2,13,-6,13,-23,-24,-26,-27,-28,-29,-30,-31,-33,13,13,-32,13,13,-37,13,13,13,13,-38,13,13,-14,13,13,13,-34,-36,-8,13,-35,-7,]),'{':([0,2,3,4,5,7,8,14,16,17,20,21,22,23,24,25,26,27,29,51,56,78,84,96,98,100,101,110,111,115,116,119,120,],[7,7,-3,-4,-5,-25,-15,-2,7,-6,-23,-24,-26,-27,-28,-29,-30,-31,-33,-32,-37,7,-38,107,-14,7,7,-34,-36,-8,7,-35,-7,]),'$end':([1,2,3,4,5,8,14,17,20,98,115,120,],[0,-1,-3,-4,-5,-15,-2,-6,-23,-14,-8,-7,]),'ID':([6,7,9,10,11,12,13,16,17,20,21,22,23,24,25,26,27,29,31,33,34,46,49,51,52,54,55,56,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,84,85,86,100,101,106,110,111,115,116,119,120,],[15,-25,-9,-10,-11,-12,-13,35,-6,-23,-24,-26,-27,-28,-29,-30,-31,-33,35,35,58,77,-10,-32,35,82,35,-37,35,35,35,35,35,-49,-50,-51,-52,-53,-54,-59,-60,35,-61,-62,-38,35,35,35,35,35,-34,-36,-8,35,-35,-7,]),'}':([7,16,17,20,21,22,23,24,25,26,27,29,51,56,84,110,111,113,114,115,119,120,121,],[-25,20,-6,-23,-24,-26,-27,-28,-29,-30,-31,-33,-32,-37,-38,-34,-36,-44,117,-8,-35,-7,-43,]),';':([7,15,16,17,20,21,22,23,24,25,26,27,28,29,33,35,36,37,38,39,40,41,42,43,44,51,56,57,58,81,84,91,92,93,94,95,100,101,103,104,105,108,110,111,115,116,117,119,120,],[-25,17,29,-6,-23,-24,-26,-27,-28,-29,-30,-31,51,-33,56,-45,-66,-42,-64,-40,-48,-56,-58,-65,-67,-32,-37,84,17,-63,-38,-39,-47,-64,-55,-57,29,29,-41,-46,-68,115,-34,-36,-8,29,120,-35,-7,]),'IF':([7,16,17,20,21,22,23,24,25,26,27,29,51,56,84,100,101,110,111,115,116,119,120,],[-25,30,-6,-23,-24,-26,-27,-28,-29,-30,-31,-33,-32,-37,-38,30,30,-34,-36,-8,30,-35,-7,]),'WHILE':([7,16,17,20,21,22,23,24,25,26,27,29,51,56,84,100,101,110,111,115,116,119,120,],[-25,32,-6,-23,-24,-26,-27,-28,-29,-30,-31,-33,-32,-37,-38,32,32,-34,-36,-8,32,-35,-7,]),'RETURN':([7,16,17,20,21,22,23,24,25,26,27,29,51,56,84,100,101,110,111,115,116,119,120,],[-25,33,-6,-23,-24,-26,-27,-28,-29,-30,-31,-33,-32,-37,-38,33,33,-34,-36,-8,33,-35,-7,]),'STRING':([7,16,17,20,21,22,23,24,25,26,27,29,31,33,51,52,55,56,60,61,62,84,85,86,96,100,101,106,110,111,115,116,119,120,],[-25,37,-6,-23,-24,-26,-27,-28,-29,-30,-31,-33,37,37,-32,37,37,-37,37,37,37,-38,37,37,108,37,37,37,-34,-36,-8,37,-35,-7,]),'(':([7,15,16,17,20,21,22,23,24,25,26,27,29,30,31,32,33,35,51,52,55,56,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,84,85,86,100,101,106,110,111,115,116,119,120,],[-25,19,31,-6,-23,-24,-26,-27,-28,-29,-30,-31,-33,52,31,55,31,61,-32,31,31,-37,31,31,31,31,31,-49,-50,-51,-52,-53,-54,-59,-60,31,-61,-62,-38,31,31,31,31,31,-34,-36,-8,31,-35,-7,]),'NUM':([7,16,17,18,20,21,22,23,24,25,26,27,29,31,33,51,52,55,56,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,84,85,86,100,101,106,107,110,111,115,116,118,119,120,],[-25,36,-6,45,-23,-24,-26,-27,-28,-29,-30,-31,-33,36,36,-32,36,36,-37,36,36,36,36,36,-49,-50,-51,-52,-53,-54,-59,-60,36,-61,-62,-38,102,36,36,36,36,113,-34,-36,-8,36,121,-35,-7,]),'BOOLEAN':([7,16,17,20,21,22,23,24,25,26,27,29,31,33,51,52,55,56,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,84,85,86,100,101,106,110,111,115,116,119,120,],[-25,44,-6,-23,-24,-26,-27,-28,-29,-30,-31,-33,44,44,-32,44,44,-37,44,44,44,44,44,-49,-50,-51,-52,-53,-54,-59,-60,44,-61,-62,-38,44,44,44,44,44,-34,-36,-8,44,-35,-7,]),'[':([15,35,58,77,82,],[18,60,85,97,60,]),'ELSE':([17,20,22,23,24,25,26,27,29,51,56,84,110,111,115,119,120,],[-6,-23,-26,-27,-28,-29,-30,-31,-33,-32,-37,-38,116,-36,-8,-35,-7,]),')':([19,35,36,37,38,39,40,41,42,43,44,47,48,49,50,53,61,77,80,81,83,88,89,90,91,92,93,94,95,99,103,104,105,109,112,],[-18,-45,-66,-42,-64,-40,-48,-56,-58,-65,-67,78,-16,-17,-20,81,-70,-21,100,-63,101,105,-69,-72,-39,-47,-64,-55,-57,-19,-41,-46,-68,-22,-71,]),'=':([35,38,58,59,76,82,104,],[-45,62,-45,86,96,-45,-46,]),'*':([35,36,38,41,42,43,44,81,93,94,95,102,104,105,],[-45,-66,-64,74,-58,-65,-67,-63,-64,74,-57,-66,-46,-68,]),'/':([35,36,38,41,42,43,44,81,93,94,95,102,104,105,],[-45,-66,-64,75,-58,-65,-67,-63,-64,75,-57,-66,-46,-68,]),'LE':([35,36,38,40,41,42,43,44,81,93,94,95,102,104,105,],[-45,-66,-64,65,-56,-58,-65,-67,-63,-64,-55,-57,-66,-46,-68,]),'<':([35,36,38,40,41,42,43,44,81,93,94,95,102,104,105,],[-45,-66,-64,66,-56,-58,-65,-67,-63,-64,-55,-57,-66,-46,-68,]),'>':([35,36,38,40,41,42,43,44,81,93,94,95,102,104,105,],[-45,-66,-64,67,-56,-58,-65,-67,-63,-64,-55,-57,-66,-46,-68,]),'GE':([35,36,38,40,41,42,43,44,81,93,94,95,102,104,105,],[-45,-66,-64,68,-56,-58,-65,-67,-63,-64,-55,-57,-66,-46,-68,]),'EE':([35,36,38,40,41,42,43,44,81,93,94,95,102,104,105,],[-45,-66,-64,69,-56,-58,-65,-67,-63,-64,-55,-57,-66,-46,-68,]),'NE':([35,36,38,40,41,42,43,44,81,93,94,95,102,104,105,],[-45,-66,-64,70,-56,-58,-65,-67,-63,-64,-55,-57,-66,-46,-68,]),'+':([35,36,38,40,41,42,43,44,81,92,93,94,95,102,104,105,],[-45,-66,-64,71,-56,-58,-65,-67,-63,71,-64,-55,-57,-66,-46,-68,]),'-':([35,36,38,40,41,42,43,44,81,92,93,94,95,102,104,105,],[-45,-66,-64,72,-56,-58,-65,-67,-63,72,-64,-55,-57,-66,-46,-68,]),']':([35,36,37,38,39,40,41,42,43,44,45,81,87,91,92,93,94,95,97,102,103,104,105,],[-45,-66,-42,-64,-40,-48,-56,-58,-65,-67,76,-63,104,-39,-47,-64,-55,-57,109,76,-41,-46,-68,]),',':([35,36,37,38,39,40,41,42,43,44,48,50,77,81,89,90,91,92,93,94,95,99,103,104,105,109,112,113,114,121,],[-45,-66,-42,-64,-40,-48,-56,-58,-65,-67,79,-20,-21,-63,106,-72,-39,-47,-64,-55,-57,-19,-41,-46,-68,-22,-71,-44,118,-43,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'declaration_list':([0,],[2,]),'declaration':([0,2,],[3,14,]),'var_declaration':([0,2,16,100,101,116,],[4,4,27,27,27,27,]),'fun_declaration':([0,2,],[5,5,]),'type_specifier':([0,2,16,19,31,33,52,55,60,61,62,79,85,86,100,101,106,116,],[6,6,34,46,54,54,54,54,54,54,54,46,54,54,34,34,54,34,]),'statement_block':([0,2,16,78,100,101,116,],[8,8,23,98,23,23,23,]),'statement_list':([7,],[16,]),'statement':([16,100,101,116,],[21,110,111,119,]),'expression_statement':([16,100,101,116,],[22,22,22,22,]),'if_else_statements':([16,100,101,116,],[24,24,24,24,]),'while_statments':([16,100,101,116,],[25,25,25,25,]),'return_statements':([16,100,101,116,],[26,26,26,26,]),'expression':([16,31,33,52,55,60,61,62,85,86,100,101,106,116,],[28,53,57,80,83,87,90,91,87,103,28,28,112,28,]),'var':([16,31,33,34,52,54,55,60,61,62,63,64,73,85,86,100,101,106,116,],[38,38,38,59,38,59,38,38,38,38,93,93,93,38,38,38,38,38,38,]),'simple_expression':([16,31,33,52,55,60,61,62,85,86,100,101,106,116,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'addsub_object':([16,31,33,52,55,60,61,62,63,85,86,100,101,106,116,],[40,40,40,40,40,40,40,40,92,40,40,40,40,40,40,]),'muldiv_object':([16,31,33,52,55,60,61,62,63,64,85,86,100,101,106,116,],[41,41,41,41,41,41,41,41,41,94,41,41,41,41,41,41,]),'object':([16,31,33,52,55,60,61,62,63,64,73,85,86,100,101,106,116,],[42,42,42,42,42,42,42,42,42,42,95,42,42,42,42,42,42,]),'fun_value':([16,31,33,52,55,60,61,62,63,64,73,85,86,100,101,106,116,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'params':([19,],[47,]),'param_list':([19,],[48,]),'param':([19,79,],[50,99,]),'relational_operator':([40,],[63,]),'add_sub':([40,92,],[64,64,]),'mul_div':([41,94,],[73,73,]),'args':([61,],[88,]),'arg_list':([61,],[89,]),'numlist':([107,],[114,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> declaration_list','start',1,'p_start','cPARSER.py',90),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list_1','cPARSER.py',95),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list_2','cPARSER.py',98),
  ('declaration -> var_declaration','declaration',1,'p_declaration_1','cPARSER.py',103),
  ('declaration -> fun_declaration','declaration',1,'p_declaration_2','cPARSER.py',106),
  ('var_declaration -> type_specifier ID ;','var_declaration',3,'p_var_declaration_1','cPARSER.py',111),
  ('var_declaration -> type_specifier ID [ NUM ] = { numlist } ;','var_declaration',10,'p_var_declaration_2','cPARSER.py',114),
  ('var_declaration -> type_specifier ID [ NUM ] = STRING ;','var_declaration',8,'p_var_declaration_3','cPARSER.py',117),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier_int','cPARSER.py',122),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier_void','cPARSER.py',125),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier_char','cPARSER.py',128),
  ('type_specifier -> CHAR_STAR','type_specifier',1,'p_type_specifier_char_star','cPARSER.py',131),
  ('type_specifier -> INT_STAR','type_specifier',1,'p_type_specifier_int_star','cPARSER.py',134),
  ('fun_declaration -> type_specifier ID ( params ) statement_block','fun_declaration',6,'p_fun_declaration_1','cPARSER.py',139),
  ('fun_declaration -> statement_block','fun_declaration',1,'p_fun_declaration_2','cPARSER.py',142),
  ('params -> param_list','params',1,'p_params_1','cPARSER.py',147),
  ('params -> VOID','params',1,'p_params_2','cPARSER.py',150),
  ('params -> <empty>','params',0,'p_params_empty','cPARSER.py',153),
  ('param_list -> param_list , param','param_list',3,'p_param_list_1','cPARSER.py',157),
  ('param_list -> param','param_list',1,'p_param_list_2','cPARSER.py',160),
  ('param -> type_specifier ID','param',2,'p_param_1','cPARSER.py',164),
  ('param -> type_specifier ID [ ]','param',4,'p_param_2','cPARSER.py',167),
  ('statement_block -> { statement_list }','statement_block',3,'p_statement_block_1','cPARSER.py',172),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list_1','cPARSER.py',177),
  ('statement_list -> <empty>','statement_list',0,'p_statement_list_empty','cPARSER.py',181),
  ('statement -> expression_statement','statement',1,'p_statement_1','cPARSER.py',186),
  ('statement -> statement_block','statement',1,'p_statement_2','cPARSER.py',189),
  ('statement -> if_else_statements','statement',1,'p_statement_3','cPARSER.py',192),
  ('statement -> while_statments','statement',1,'p_statement_4','cPARSER.py',195),
  ('statement -> return_statements','statement',1,'p_statement_5','cPARSER.py',198),
  ('statement -> var_declaration','statement',1,'p_statement_6','cPARSER.py',201),
  ('expression_statement -> expression ;','expression_statement',2,'p_expression_statement_1','cPARSER.py',206),
  ('expression_statement -> ;','expression_statement',1,'p_expression_statement_2','cPARSER.py',209),
  ('if_else_statements -> IF ( expression ) statement','if_else_statements',5,'p_if_else_statements_1','cPARSER.py',214),
  ('if_else_statements -> IF ( expression ) statement ELSE statement','if_else_statements',7,'p_if_else_statements_2','cPARSER.py',217),
  ('while_statments -> WHILE ( expression ) statement','while_statments',5,'p_while_statments_1','cPARSER.py',222),
  ('return_statements -> RETURN ;','return_statements',2,'p_return_statements_1','cPARSER.py',227),
  ('return_statements -> RETURN expression ;','return_statements',3,'p_return_statements_2','cPARSER.py',230),
  ('expression -> var = expression','expression',3,'p_expression_1','cPARSER.py',236),
  ('expression -> simple_expression','expression',1,'p_expression_2','cPARSER.py',240),
  ('expression -> type_specifier var = expression','expression',4,'p_expression_3','cPARSER.py',245),
  ('expression -> STRING','expression',1,'p_expression_4','cPARSER.py',250),
  ('numlist -> numlist , NUM','numlist',3,'p_numlist_1','cPARSER.py',253),
  ('numlist -> NUM','numlist',1,'p_numlist_2','cPARSER.py',256),
  ('var -> ID','var',1,'p_var_1','cPARSER.py',261),
  ('var -> ID [ expression ]','var',4,'p_var_2','cPARSER.py',264),
  ('simple_expression -> addsub_object relational_operator addsub_object','simple_expression',3,'p_simple_expression_1','cPARSER.py',269),
  ('simple_expression -> addsub_object','simple_expression',1,'p_simple_expression_2','cPARSER.py',272),
  ('relational_operator -> LE','relational_operator',1,'p_relational_operator_1','cPARSER.py',277),
  ('relational_operator -> <','relational_operator',1,'p_relational_operator_2','cPARSER.py',280),
  ('relational_operator -> >','relational_operator',1,'p_relational_operator_3','cPARSER.py',283),
  ('relational_operator -> GE','relational_operator',1,'p_relational_operator_4','cPARSER.py',286),
  ('relational_operator -> EE','relational_operator',1,'p_relational_operator_5','cPARSER.py',289),
  ('relational_operator -> NE','relational_operator',1,'p_relational_operator_6','cPARSER.py',292),
  ('addsub_object -> addsub_object add_sub muldiv_object','addsub_object',3,'p_addsub_object_1','cPARSER.py',298),
  ('addsub_object -> muldiv_object','addsub_object',1,'p_addsub_object_2','cPARSER.py',301),
  ('muldiv_object -> muldiv_object mul_div object','muldiv_object',3,'p_muldiv_object_1','cPARSER.py',305),
  ('muldiv_object -> object','muldiv_object',1,'p_muldiv_object_2','cPARSER.py',308),
  ('add_sub -> +','add_sub',1,'p_add_sub_1','cPARSER.py',313),
  ('add_sub -> -','add_sub',1,'p_add_sub_2','cPARSER.py',316),
  ('mul_div -> *','mul_div',1,'p_mul_div_1','cPARSER.py',319),
  ('mul_div -> /','mul_div',1,'p_mul_div_2','cPARSER.py',322),
  ('object -> ( expression )','object',3,'p_object_1','cPARSER.py',327),
  ('object -> var','object',1,'p_object_2','cPARSER.py',330),
  ('object -> fun_value','object',1,'p_object_3','cPARSER.py',333),
  ('object -> NUM','object',1,'p_object_4','cPARSER.py',336),
  ('object -> BOOLEAN','object',1,'p_object_5','cPARSER.py',339),
  ('fun_value -> ID ( args )','fun_value',4,'p_fun_value_1','cPARSER.py',345),
  ('args -> arg_list','args',1,'p_args_1','cPARSER.py',349),
  ('args -> <empty>','args',0,'p_args_empty','cPARSER.py',352),
  ('arg_list -> arg_list , expression','arg_list',3,'p_arg_list_1','cPARSER.py',356),
  ('arg_list -> expression','arg_list',1,'p_arg_list_2','cPARSER.py',359),
]
